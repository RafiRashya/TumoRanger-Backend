Index: app/src/main/java/com/dicoding/tumoranger/ui/settings/SettingsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dicoding.tumoranger.ui.settings\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.appcompat.app.AppCompatDelegate\r\nimport com.dicoding.tumoranger.R\r\nimport com.dicoding.tumoranger.databinding.FragmentSettingsBinding\r\nimport com.dicoding.tumoranger.ui.login.LoginActivity\r\nimport com.dicoding.tumoranger.data.UserPreference\r\nimport com.dicoding.tumoranger.data.dataStore\r\nimport kotlinx.coroutines.flow.collect\r\nimport kotlinx.coroutines.launch\r\nimport java.util.Locale\r\n\r\nclass SettingsFragment : Fragment() {\r\n\r\n    private var _binding: FragmentSettingsBinding? = null\r\n    private val binding get() = _binding!!\r\n    private lateinit var settingsViewModel: SettingsViewModel\r\n    private lateinit var userPreference: UserPreference\r\n    private lateinit var sharedPreferences: android.content.SharedPreferences\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        // Inflate the layout using View Binding\r\n        _binding = FragmentSettingsBinding.inflate(inflater, container, false)\r\n        val root: View = binding.root\r\n\r\n        // Initialize UserPreference with dataStore from context\r\n        userPreference = UserPreference.getInstance(requireContext().dataStore)\r\n        sharedPreferences = requireActivity().getSharedPreferences(\"theme_prefs\", Context.MODE_PRIVATE)\r\n\r\n        // Initialize ViewModel with the factory\r\n        settingsViewModel = ViewModelProvider(this, SettingsViewModelFactory(userPreference))\r\n            .get(SettingsViewModel::class.java)\r\n\r\n        // Fetch user profile\r\n        settingsViewModel.fetchUserProfile()\r\n\r\n        // Observe profile data\r\n        settingsViewModel.profile.observe(viewLifecycleOwner, { profile ->\r\n            // Update the username in the UI\r\n            binding.textViewName.text = profile.data?.username\r\n        })\r\n\r\n        // Observe error messages\r\n        settingsViewModel.errorMessage.observe(viewLifecycleOwner, { errorMessage ->\r\n            // Show error message if any\r\n            Toast.makeText(requireContext(), errorMessage, Toast.LENGTH_SHORT).show()\r\n        })\r\n\r\n        // Handle Logout Button\r\n        binding.buttonLogout.setOnClickListener {\r\n            logout()\r\n        }\r\n\r\n        // Set default values for the radio buttons\r\n        setInitialTheme()\r\n        setInitialLanguage()\r\n\r\n        // Handle Manage Account Button\r\n        binding.buttonManageAccount.setOnClickListener {\r\n            // Handle account management logic here\r\n        }\r\n\r\n        // Listen to language selection change\r\n        binding.radioGroupLanguage.setOnCheckedChangeListener { _, checkedId ->\r\n            val newLanguage = when (checkedId) {\r\n                binding.radioEnglish.id -> \"en\"\r\n                binding.radioIndonesian.id -> \"in\"\r\n                else -> return@setOnCheckedChangeListener\r\n            }\r\n            saveLanguage(newLanguage)\r\n            applyLanguage(newLanguage)\r\n            Toast.makeText(requireContext(), \"Language changed to $newLanguage\", Toast.LENGTH_SHORT).show()\r\n        }\r\n\r\n        // Listen to appearance selection change\r\n        binding.radioGroupAppearance.setOnCheckedChangeListener { _, checkedId ->\r\n            when (checkedId) {\r\n                binding.radioSystemDefault.id -> saveTheme(\"system\")\r\n                binding.radioLight.id -> saveTheme(\"light\")\r\n                binding.radioDark.id -> saveTheme(\"dark\")\r\n            }\r\n        }\r\n\r\n        return root\r\n    }\r\n\r\n    private fun setInitialTheme() {\r\n        val savedTheme = sharedPreferences.getString(\"selected_theme\", \"system\")\r\n        when (savedTheme) {\r\n            \"light\" -> binding.radioGroupAppearance.check(binding.radioLight.id)\r\n            \"dark\" -> binding.radioGroupAppearance.check(binding.radioDark.id)\r\n            else -> binding.radioGroupAppearance.check(binding.radioSystemDefault.id)\r\n        }\r\n    }\r\n\r\n    private fun saveTheme(theme: String) {\r\n        sharedPreferences.edit().putString(\"selected_theme\", theme).apply()\r\n        when (theme) {\r\n            \"light\" -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)\r\n            \"dark\" -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)\r\n            \"system\" -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)\r\n        }\r\n        Toast.makeText(requireContext(), \"Theme changed to $theme\", Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    private fun setInitialLanguage() {\r\n        val savedLanguage = sharedPreferences.getString(\"selected_language\", \"en\")\r\n        when (savedLanguage) {\r\n            \"en\" -> binding.radioGroupLanguage.check(binding.radioEnglish.id)\r\n            \"in\" -> binding.radioGroupLanguage.check(binding.radioIndonesian.id)\r\n        }\r\n    }\r\n\r\n    private fun saveLanguage(languageCode: String) {\r\n        sharedPreferences.edit().putString(\"selected_language\", languageCode).apply()\r\n    }\r\n\r\n    private fun applyLanguage(languageCode: String) {\r\n        val locale = Locale(languageCode)\r\n        Locale.setDefault(locale)\r\n\r\n        val config = resources.configuration\r\n        config.setLocale(locale)\r\n\r\n        val context = requireContext().createConfigurationContext(config)\r\n        resources.updateConfiguration(config, resources.displayMetrics)\r\n\r\n        // Simpan bahasa yang dipilih\r\n        saveLanguage(languageCode)\r\n        // Trigger activity refresh with new language\r\n        requireActivity().recreate()  // Refresh activity for the language change\r\n    }\r\n\r\n    private fun logout() {\r\n        val sharedPreferences = requireActivity().getSharedPreferences(\"user_prefs\", Context.MODE_PRIVATE)\r\n        with(sharedPreferences.edit()) {\r\n            remove(\"auth_token\")\r\n            putBoolean(\"is_logged_in\", false)\r\n            apply()\r\n        }\r\n\r\n        val intent = Intent(activity, LoginActivity::class.java)\r\n        startActivity(intent)\r\n        activity?.finish()\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dicoding/tumoranger/ui/settings/SettingsFragment.kt b/app/src/main/java/com/dicoding/tumoranger/ui/settings/SettingsFragment.kt
--- a/app/src/main/java/com/dicoding/tumoranger/ui/settings/SettingsFragment.kt	(revision d2711a7a6e4ee445f823f5286067903cb161d169)
+++ b/app/src/main/java/com/dicoding/tumoranger/ui/settings/SettingsFragment.kt	(date 1734004169837)
@@ -40,8 +40,7 @@
         sharedPreferences = requireActivity().getSharedPreferences("theme_prefs", Context.MODE_PRIVATE)
 
         // Initialize ViewModel with the factory
-        settingsViewModel = ViewModelProvider(this, SettingsViewModelFactory(userPreference))
-            .get(SettingsViewModel::class.java)
+        settingsViewModel = ViewModelProvider(this, SettingsViewModelFactory(userPreference))[SettingsViewModel::class.java]
 
         // Fetch user profile
         settingsViewModel.fetchUserProfile()
@@ -49,14 +48,14 @@
         // Observe profile data
         settingsViewModel.profile.observe(viewLifecycleOwner, { profile ->
             // Update the username in the UI
-            binding.textViewName.text = profile.data?.username
+            binding.textViewName.text = profile.data.username
         })
 
         // Observe error messages
-        settingsViewModel.errorMessage.observe(viewLifecycleOwner, { errorMessage ->
+        settingsViewModel.errorMessage.observe(viewLifecycleOwner) { errorMessage ->
             // Show error message if any
             Toast.makeText(requireContext(), errorMessage, Toast.LENGTH_SHORT).show()
-        })
+        }
 
         // Handle Logout Button
         binding.buttonLogout.setOnClickListener {
